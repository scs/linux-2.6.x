/*
 * File:         bf53x_spi.h 
 * Description:  low level driver for SPI port on blackfin 53x
 *               this should be moved to arch/bfinnommu/
 * Rev:          $Id$
 * Created:      Tue Sep 21 10:52:42 CEST 2004
 * Author:       Luuk van Dijk
 * mail:         blackfin@mdnmttr.nl
 * 
 * Copyright (C) 2004 Luuk van Dijk, Mind over Matter B.V.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.
 * If not, write to the Free Software Foundation,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#ifndef BF53X_SPI_H
#define BF53X_SPI_H

#include <linux/types.h>

struct bf53x_spi_channel;
struct bf53x_spi;

/* a callback function that is called from the IRQ handler when dma transmit or receive, 
   or a single word transceive is done */
typedef int (*spi_callback)(struct bf53x_spi_channel* chan, void* buf, size_t len, void* private);

/* initialize the spi port */

/* dma channel, and data and error irq's should match the settings in the SIC_IARx registers */
struct bf53x_spi* bf53x_spi_init(int dma_chan, int irq_data, int irq_err, int multimaster );


void bf53x_spi_done(struct bf53x_spi* spi);


/* this should be called by the kernel from the data and error irqs for the SPI.
 * it will handle the callbacks. irq should contain the irq that triggered this, 
 * so this code can determine wether an error or a finish condition occured.
 * this code will determine if the irq was actually generated by the SPI,
 * so it can be called safely in shared irq environments
 */

int bf53x_spi_irq_handler(struct bf53x_spi* spi, int irq);

int bf53x_spi_busy(struct bf53x_spi* spi);
int bf53x_spi_clear_channel(struct bf53x_spi* spi);

/* create a channel */
/* note: config flags may contain SZ, GM, CPHA and CPOL, the other flags
   in SPI_CTL are controlled by the master/multimaster logic 
*/
struct bf53x_spi_channel* bf53x_spi_create_channel(struct bf53x_spi* spi,
						   int master,
						   unsigned int baud,
						   int wordsize, /* 1 = 16 bits, 0 = 8 bits */
						   unsigned int slave_flags, /* mask of FLSx flags */
						   unsigned int config_flags, /* see note above */
						   spi_callback callback, 
						   void* private /* default callback */
);

void bf53x_spi_destroy_channel(struct bf53x_spi_channel* chan);


/* transmit/receive a single byte or word over a channel */
int bf53x_spi_transceive(struct bf53x_spi_channel* chan, short data,
			 spi_callback callback, void* private );



#if 0  /* DMA mode not implemented yet */

/* transmit/receive a packet over a channel. len is in bytes */

int bf53x_spi_dma_xmit(struct bf53x_spi_channel* chan, void* buf, size_t len, 
		       spi_callback callback, void* private);

int bf53x_spi_dma_recv(struct bf53x_spi_channel* chan, void* buf, size_t len, 
		       spi_callback callback, void* private);
#endif

#endif /* BF53X_SPI_H */
