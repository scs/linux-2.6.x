$Id$
Luuk van Dijk
Sun Nov 14 14:02:28 CET 2004

overview
========

this is a dropin replacement for <cvs.blackfin.uclinux.org:/cvsroot/uclinux533> 
	.../uClinux-dist/linux-2.6.x/sound/blackfin
containing a driver for the Analog Devices AD1836 sound chip connected
to a Blackfin 533 sport + spi.  To use it, move the original out of
the way, and symlink in this directory. Be sure to add the blackfin/
directories to Kconfig and Makefile in the sound/ directory.

the subdirectory blackfin/test may be symlinked to
	.../uClinux-dist/user/blkfin-test/audio_test. 

It contains three utilities to test the driver.

Then, using menuconfig, enter the 'Sound' config menu, enable 'Sound
card support', enter the 'Advanced Linux Sound Architecture' submenu,
enable 'Advanced Linux Sound Architecture', enable the Mixer API, and
the OSS PCM support.  verbose printk and debug may be enabled for
verbose reporting of what happens in the driver.  Select '1836 Audio
support for BF53x', and choose the SPORT port to which it is
connected.  further details of the configuration (spi/pf bits, irq
levels etc) may be changed by editing adi1836_config.h if neccesary.

To enable the test programs, choose 'Blackfin test programs', and
enable 'RTC test program' in 'Kernel/Library/Defaults Selection' of
the uClinux top config.


current status
============== 

half duplex operation works, full duplex needs thought + work.  access
trough the OSS emulation layer works fine. Libalsa is not in
uClinux-dist yet.

Occasionaly, the sport will fail with a (unexplained) transmit or
receive under/overflow.  This will be noted on the console.
Restarting your program will re-initialize the interface.


proc files
==========

for testing and debuging, a number of /proc files exist in adition to
the standard Alsa ones:

	/proc/asound/card?/registers	current status of ad1836 registers, 
					including the adc VU meters
	/proc/asound/card?/sport	sport status & irq rate info
	/proc/asound/card?/spi		spi irq rate info
	/proc/asound/card?/chan_mask    determines which channels are 
					opened in 2,4,6 or 8 channel mode
	/proc/asounc/card?/talktrough	get/set talktrough mode

card? will be card0 if you don't enable the dummy sound driver in the
Alsa config menu.

registers
---------

/proc/asound/card0> cat registers
DAC_CTRL_1  0x0000
DAC_CTRL_2  0x1000
DAC_VOL_1L  0x23ff
DAC_VOL_1R  0x33ff
DAC_VOL_2L  0x43ff
DAC_VOL_2R  0x53ff
DAC_VOL_3L  0x63ff
DAC_VOL_3R  0x73ff
ADC_PEAK_1L 0x88e0 -14 dBFS
ADC_PEAK_1R 0x9960 -22 dBFS
ADC_PEAK_2L 0xab10 -49 dBFS
ADC_PEAK_2R 0xbbb0 -59 dBFS
ADC_CTRL_1  0xc000
ADC_CTRL_2  0xd180

Note that registers 0x8 - 0xb are the ad1836 VU meters. The driver
samples one channel every fragment.  The other registers may be
written to by writing a string of the form 0x1234 to
/proc/asound/card0/registers.  Note that this can freeze the chip or
driver.


sport and spi
-------------

/proc/asound/card0> cat sport
irq tot: 4433 4659/100s                   
irq rx:  2217 2330/100s                   
irq tx:  2217 2330/100s
sport  0 sts: 0x0008
rx dma 1 cfg: 0x10db sts: 0x0008
tx dma 2 cfg: 0x10d9 sts: 0x0008

The first three lines give the total number of interrupts since this
file was last read and the rate (eg: 2330/100s = 23.30 Hz). tot is the
number of times the handler was entered, rx and tx are the number of
times of those that the rx and rx irq were asserted.  the last three
lines give the current sport config register, and the dma config and
status registers.

spi gives the SPI irq statistics.  You may expect this to be equal to
the sport/rx rate.

both these files are read-only.

talktrough
----------

in talktrough mode, all input channels are copied to output
channels. "stupid" mode does this by setting the input dma buffer ==
output dma buffer, "smart" mode does a memcpy in the irq handler
talktrough mode can be set or cleared by writing '0' (off), '1'
(stupid) or '2' to this file. reading it back gives the current mode.
If talktrough mode is enabled, opening the device for normal operation
will return EBUSY.  As a special service you can panic the system by
writing a 'p' to it.  This allows you to admire the sound quality with
the rest of the kernel dead :-)


chan_mask
---------

chan mask determines which channels are used when opening 2,4,6 or 8
channels.  you can write a permutation of '0123' to it, meaning: when
opening 2 channels, use channels adc0, when opening 4 use adc0 and adc1
etc. and mutatis mutandis for output.  note that the order of the
channels in the interleaved data is not changed by this string.
Reading the file gives the current mask.

test programs
-------------

ossrec and ossplay are very simple minded play and record programs for
testing the driver though the /dev/dsp. 

	cd /tmp
	ossrec lala
	ossplay lala

options change channels, samplerate, fragment size and lenght of the recorded fragment

since the standard uclinux shell sash has no i/o redirection, the program echo2 may work wonders.

	echo2 talktrough 2
does what you want when you wanted to do
	echo 2 > talktrough



===============================

for questions, ideas, remarks etc , contact me.
have fun

	Luuk van Dijk, blackfin@mndmttr.nl


