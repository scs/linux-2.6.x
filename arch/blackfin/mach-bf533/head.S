/* arch/bfinnommu/mach-bf533/head.S
 *
 * Startup code for Blackfin BF533 
 *
 * Copyright (C) 1998  D. Jeff Dionne <jeff@uclinux.org>
 * Copyright (C) 2004 LG Soft India 
 *
 */

#include <linux/config.h>
#include <asm/blackfin.h>

.global _rambase
.global _ramstart
.global _ramend
.global _stext
.global _start

.text 

_start:
_stext:
	/* Set the SYSCFG register */	
	R0 = 0x36; 		/*Enable Cycle Counter and Nesting Of Interrupts(3rd Bit)*/
	SYSCFG = r0;
	R0 = 0;

/*Clear Out All the data and pointer  Registers*/	
	R1 = R0;
	R2 = R0;
	R3 = R0;
	R4 = R0;
	R5 = R0;
	R6 = R0;
	R7 = R0;

	P0 = R0;
	P1 = R0;
	P2 = R0;
	P3 = R0;
	P4 = R0;
	P5 = R0;

	LC0 = r0;
	LC1 = r0;
	L0 = r0;
	L1 = r0;
	L2 = r0;
	L3 = r0;

/*Clear Out All the DAG Registers*/	
	B0 = r0;
	B1 = r0;
	B2 = r0;
	B3 = r0;

	I0 = r0;
	I1 = r0;
	I2 = r0;
	I3 = r0;

	M0 = r0;
	M1 = r0;
	M2 = r0;
	M3 = r0;

	/* Set the port preferences of DAG0 and DAG1 to be
	 different. this gives better performance when
	 performing daul-dag operations on SDRAM.*/
	
	P0.L = DMEM_CONTROL & 0xFFFF;
	P0.H = DMEM_CONTROL >> 16;
	R0 = [P0];
	BITCLR(R0, 12);
	BITSET(R0, 13);
	[P0] = R0;
	CSYNC;

	p0.h = (UART_LCR >> 16);
	p0.l = (UART_LCR & 0xFFFF);
	r0 = 0x0(Z);	
	w[p0] = r0.L;	/* To enable DLL writes */
	ssync;

	p0.h = (UART_DLL >> 16);
	p0.l = (UART_DLL & 0xFFFF);
	r0 = 0x0(Z);
	w[p0] = r0.L;
	ssync;

	p0.h = (UART_DLH >> 16);
	p0.l = (UART_DLH & 0xFFFF);
	r0 = 0x00(Z);
	w[p0] = r0.L;
	ssync;
	
	p0.h = (UART_GCTL>>16);
	p0.l = (UART_GCTL & 0xFFFF);
	r0 = 0x0(Z);
	w[p0] = r0.L;	/* To enable UART clock */
	ssync;

	p0.h = (PLL_CTL >> 16);
	p0.l = (PLL_CTL & 0xFFFF);
#ifdef CONFIG_BLKFIN_STAMP 
	r0 = 0x4800 ;
#elif defined CONFIG_EZKIT
	r0 = CCLK_594; /* 27 * 22 = 594MHZ core clock, sclk = 118.8MHz */
#endif
	w[p0] = r0.l;
	cli r2;
	ssync;
	idle;
	sti r2;

	p0.h = (PLL_DIV >> 16);
	p0.l = (PLL_DIV & 0xFFFF);
	r0 = 0x5 ;
	w[p0] = r0;
	ssync;

check_again:
	p0.h = hi(PLL_STAT);
	p0.l = lo(PLL_STAT);
	R0 = W[P0](Z);
	CC = BITTST(R0,5);
	if ! CC jump check_again;
	
	/* Code for initializing Async memory banks */

        p2.h = (EBIU_AMBCTL1 >> 16);
        p2.l = (EBIU_AMBCTL1 & 0xFFFF);
        r0.h = (AMBCTL1VAL >> 16); 
        r0.l = (AMBCTL1VAL & 0xffff); 
        [p2] = r0;
        ssync;

        p2.h = (EBIU_AMBCTL0 >> 16);
        p2.l = (EBIU_AMBCTL0 & 0xFFFF);
        r0.h = (AMBCTL0VAL >> 16); 
        r0.l = (AMBCTL0VAL & 0xffff);
        [p2] = r0;
        ssync;

        p2.h = (EBIU_AMGCTL >> 16);
        p2.l = (EBIU_AMGCTL & 0xffff);
        r0 = AMGCTLVAL; 
        w[p2] = r0;
        ssync;

/* DMA reset code to Hi of L1 SRAM */
copy:
	P1.H = hi(SYSMMR_BASE);		/* P1 Points to the beginning of SYSTEM MMR Space */
	P1.L = lo(SYSMMR_BASE);

	R0.H = reset_start;		/* Source Address (high) */
	R0.L = reset_start;		/* Source Address (low) */
	R1.H = reset_end;
	R1.L = reset_end;
	R2 = R1 - R0;			/* Count */
	R1.H = hi(L1_ISRAM);		/* Destination Address (high) */
	R1.L = lo(L1_ISRAM);		/* Destination Address (low) */
	R3.L = DMAEN;			/* Source DMAConfig Value (8-bit words) */
	R4.L = (DI_EN | WNR | DMAEN);	/* Destination DMAConfig Value (8-bit words) */

DMA:
	R6 = 0x1 (Z);
	W[P1+OFFSET_(MDMA_S0_X_MODIFY)] = R6;	/* Source Modify = 1 */
	W[P1+OFFSET_(MDMA_D0_X_MODIFY)] = R6;	/* Destination Modify = 1 */

	[P1+OFFSET_(MDMA_S0_START_ADDR)] = R0;	/* Set Source Base Address */
	W[P1+OFFSET_(MDMA_S0_X_COUNT)] = R2;	/* Set Source Count */
	/* Set Source      DMAConfig = DMA Enable, 
	Memory Read,  8-Bit Transfers, 1-D DMA, Flow - Stop */
	W[P1+OFFSET_(MDMA_S0_CONFIG)] = R3;	

	[P1+OFFSET_(MDMA_D0_START_ADDR)] = R1;	/* Set Destination Base Address */
	W[P1+OFFSET_(MDMA_D0_X_COUNT)] = R2;	/* Set Destination Count */
	/* Set Destination DMAConfig = DMA Enable, 
	Memory Write, 8-Bit Transfers, 1-D DMA, Flow - Stop, IOC */
	W[P1+OFFSET_(MDMA_D0_CONFIG)] = R4;	

	IDLE;					/*Wait for DMA to Complete */

	R0 = 0x1;
	W[P1+OFFSET_(MDMA_D0_IRQ_STATUS)] = R0;	/*Write 1 to clear DMA interrupt */

	/* DMA reset code to DATA BANK A which uses this port 
	 * to avoid following problem
	 * " Data from a Data Cache fill can be corrupoted after or during
	 *   instruction DMA if certain core stalls exist"
	 */

copy_as_data:
	R0.H = reset_start;             /* Source Address (high) */
	R0.L = reset_start;             /* Source Address (low) */
	R1.H = reset_end;
	R1.L = reset_end;
	R2 = R1 - R0;                   /* Count */
	R1.H = hi(DATA_BANKA_SRAM);    	/* Destination Address (high) */
	R1.L = lo(DATA_BANKA_SRAM);     /* Destination Address (low) */
	R3.L = DMAEN;                   /* Source DMAConfig Value (8-bit words) */
	R4.L = (DI_EN | WNR | DMAEN);   /* Destination DMAConfig Value (8-bit words) */

DMA_DATA:
	R6 = 0x1 (Z);
	W[P1+OFFSET_(MDMA_S0_X_MODIFY)] = R6;   /* Source Modify = 1 */
	W[P1+OFFSET_(MDMA_D0_X_MODIFY)] = R6;   /* Destination Modify = 1 */

 	[P1+OFFSET_(MDMA_S0_START_ADDR)] = R0;  /* Set Source Base Address */
	W[P1+OFFSET_(MDMA_S0_X_COUNT)] = R2;    /* Set Source Count */
	/* Set Source      DMAConfig = DMA Enable,
	Memory Read,  8-Bit Transfers, 1-D DMA, Flow - Stop */
	W[P1+OFFSET_(MDMA_S0_CONFIG)] = R3;

	[P1+OFFSET_(MDMA_D0_START_ADDR)] = R1;  /* Set Destination Base Address */
	W[P1+OFFSET_(MDMA_D0_X_COUNT)] = R2;    /* Set Destination Count */
	/* Set Destination DMAConfig = DMA Enable,
	Memory Write, 8-Bit Transfers, 1-D DMA, Flow - Stop, IOC */
	W[P1+OFFSET_(MDMA_D0_CONFIG)] = R4;

	IDLE;                                   /*Wait for DMA to Complete */

	R0 = 0x1;
	W[P1+OFFSET_(MDMA_D0_IRQ_STATUS)] = R0; /*Write 1 to clear DMA interrupt*/

copy_end: nop;

	/* This section keeps the processor in supervisor mode
         * during kernel boot.  Switches to user mode at end of boot.
	 * See page 3-9 of Hardware Reference manual for documentation.
	 */

	/* EVT15 = _real_start */

	p0.l = (EVT15 & 0xFFFF);
	p0.h = (EVT15 >> 16);
	p1.l = _real_start;
	p1.h = _real_start;
	[p0] = p1;
	csync;

	p0.l = (IMASK & 0xFFFF);
	p0.h = (IMASK >> 16);
	p1.l = IMASK_IVG15;
	p1.h = 0x0;
	[p0] = p1;
	csync;

	raise 15;
	p0.l = WAIT_HERE;
	p0.h = WAIT_HERE;
	reti = p0;
	rti;
	
WAIT_HERE:
	jump WAIT_HERE;

.global _real_start; 
_real_start:
	[ -- sp ] = reti;
	p0.l = (WDOG_CTL & 0xFFFF);
	p0.h = (WDOG_CTL >> 16);
	r0 = 0xAD6(z);
	w[p0] = r0;	/* watchdog off for now */
	ssync;

	/* Code update for BSS size == 0
	 * Zero out the bss region.
	 */

	p1.l = _sbss;
	p1.h = _sbss;
	p2.l = _ebss;
	p2.h = _ebss;
	r0 = 0;
	p2 -= p1; 
	lsetup (_clear_bss, _clear_bss ) lc0 = p2;
_clear_bss:
	B[p1++] = r0;

	p1.l = _rambase;
	p1.h = _rambase;
	r0.l = _sdata ;
	r0.h = _sdata ;
	[p1] = r0;

	p1.l = _ramstart;
	p1.h = _ramstart;
	r0.l = _end;
	r0.h = _end;
	[p1] = r0;
	r0.l = (RAM_END & 0xFFFF);
	r0.h = (RAM_END >> 16);
	p1.l = _ramend;
	p1.h = _ramend; 
	[p1] = r0;

	/*
	 *  load the current thread pointer and stack
	 */
	r1.l = init_thread_union;
	r1.h = init_thread_union;

/* Use kernel stack instead of an l1 stack. l1 stack might overflow.
 * For this time being this should be sufficient.
 */
	r2.l = 0x2000; 
	r2.h = 0x0000; 
	r1 = r1 + r2;
	sp = r1; 
	usp = sp;
	fp = sp;
	call	start_kernel;
_exit:
	jump.s	_exit;
	
reset_start:
        /* Soft Reset */
        p0.h = SWRST >> 16;
        p0.l = SWRST & 0xFFFF;
	r0 = w[p0];
	csync;
        r0 = 0x0007;
        w[p0] = r0;
        ssync;

	r0 = w[p0];
	csync;
        r0 = 0x0000;
        w[p0] = r0;
        ssync;
        /* Core reset - forces reboot */
        RAISE 1 ;
reset_end: nop;

.data

/*
 *      Set up the usable of RAM stuff. Size of RAM is determined then
 *      an initial stack set up at the end.
 */

.align 4
_rambase:
.long   0
_ramstart:
.long   0
_ramend:
.long   0

