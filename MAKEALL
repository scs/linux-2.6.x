#!/bin/bash

update=false
all=false
while [[ -n $1 ]] ; do
	case $1 in
		-u) update=true;;
		-a) all=true;;
		*)  echo "Unknown argument $1"; exit 1;;
	esac
	shift
done

jobs=$(grep -cs processor /proc/cpuinfo)
jobs=$((${jobs:-1} * 2))

procs() {
	local cpu=$(sed -n '/^CONFIG_BF5[0-9][0-9]=y/{s:CONFIG_::;s:=y::p}' .config)
	if ! ${all} ; then
		echo ${cpu}
		return
	fi
	case $cpu in
		BF52[234567]) echo BF52{2,3,4,5,6,7};;
		BF53[123])    echo BF53{1,2,3};;
		BF53[467])    echo BF53{4,6,7};;
		BF54[24789])  echo BF54{2,4,7,9,8};;
		BF561)        echo BF561;;
	esac
}

make="make -s ARCH=blackfin CROSS_COMPILE=bfin-uclinux-"

ret=0
for b in $(cd arch/blackfin/configs ; echo *_defconfig) ; do
	echo "### $b"
	${make} $b >& /dev/null
	for p in $(procs) ; do
		echo -n "###### $p: "
		rm -f $b.$p.log*
		sed -i 1iCONFIG_${p}=y .config
		yes "" | ${make} oldconfig >& /dev/null
		${make} -j${jobs} "$@" >& $b.$p.log
		if [[ $? -eq 0 ]] ; then
			echo "OK"
		else
			# "normalize" and "minimize" the error log
			${make} -j1 "$@" >& $b.$p.log.FAIL
			${make} -j1 "$@" >& $b.$p.log.FAIL
			echo "FAIL"
			((++ret))
		fi
	done
	if ${update} ; then
		diff -u .config arch/blackfin/configs/$b || :
		sed -e 4d .config > arch/blackfin/configs/$b
	fi
done
exit ${ret}
